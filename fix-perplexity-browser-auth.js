// Script para corrigir o problema de autentica√ß√£o do Perplexity no modo browser
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß Iniciando corre√ß√£o do problema de autentica√ß√£o do Perplexity...');

// Encontrar o diret√≥rio de configura√ß√£o do VSCode
function findVsCodeConfigDir() {
  const possiblePaths = [
    // Windows
    path.join(process.env.APPDATA || '', 'Code', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
    // macOS
    path.join(process.env.HOME || '', 'Library', 'Application Support', 'Code', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
    // Linux
    path.join(process.env.HOME || '', '.config', 'Code', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
    // VSCodium (alternativa open source)
    path.join(process.env.APPDATA || '', 'VSCodium', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
    path.join(process.env.HOME || '', 'Library', 'Application Support', 'VSCodium', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
    path.join(process.env.HOME || '', '.config', 'VSCodium', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline'),
  ];

  for (const dirPath of possiblePaths) {
    if (fs.existsSync(dirPath)) {
      console.log(`‚úÖ Diret√≥rio de configura√ß√£o encontrado: ${dirPath}`);
      return dirPath;
    }
  }
  
  console.log('‚ùå Diret√≥rio de configura√ß√£o n√£o encontrado nos caminhos padr√£o');
  return null;
}

// Verificar e corrigir arquivos de configura√ß√£o
function fixConfigFiles() {
  const configDir = findVsCodeConfigDir();
  
  if (!configDir) {
    console.log('‚ùó N√£o foi poss√≠vel encontrar o diret√≥rio de configura√ß√£o. Continuando com a corre√ß√£o do c√≥digo...');
  } else {
    // Procurar por arquivos de configura√ß√£o
    const files = fs.readdirSync(configDir);
    let settingsFound = false;
    
    for (const file of files) {
      if (file.endsWith('.json')) {
        const fullPath = path.join(configDir, file);
        console.log(`üìÑ Analisando arquivo de configura√ß√£o: ${file}`);
        
        try {
          const config = JSON.parse(fs.readFileSync(fullPath, 'utf8'));
          
          // Fazer backup do arquivo
          fs.writeFileSync(`${fullPath}.backup`, JSON.stringify(config, null, 2));
          console.log(`‚úÖ Backup criado em: ${fullPath}.backup`);
          
          // Verificar e ajustar configura√ß√µes do Perplexity
          if (config.perplexityPreferMethod || config.encryptedPerplexityApiKey) {
            settingsFound = true;
            
            // Se o modo browser estiver selecionado, remover chaves de API
            if (config.perplexityPreferMethod === "browser") {
              delete config.encryptedPerplexityApiKey;
              delete config.perplexityApiKey;
              console.log('üîÑ Configura√ß√£o ajustada: Removidas chaves de API para modo browser');
            }
            
            // Salvar configura√ß√£o modificada
            fs.writeFileSync(fullPath, JSON.stringify(config, null, 2));
            console.log(`‚úÖ Configura√ß√£o salva em: ${fullPath}`);
          }
        } catch (error) {
          console.error(`‚ùå Erro ao processar arquivo ${file}: ${error.message}`);
        }
      }
    }
    
    if (!settingsFound) {
      console.log('‚ùó Nenhuma configura√ß√£o do Perplexity encontrada nos arquivos');
    }
    
    // Criar diret√≥rio de logs se n√£o existir
    const logDir = path.join(configDir, 'logs');
    if (!fs.existsSync(logDir)) {
      try {
        fs.mkdirSync(logDir, { recursive: true });
        console.log(`‚úÖ Diret√≥rio de logs criado: ${logDir}`);
      } catch (error) {
        console.error(`‚ùå Erro ao criar diret√≥rio de logs: ${error.message}`);
      }
    }
    
    // Tentar criar um arquivo de log de teste
    const testLogFile = path.join(configDir, 'perplexity-logs.txt');
    try {
      fs.writeFileSync(testLogFile, `--- Log de teste criado em ${new Date().toISOString()} ---\n`);
      console.log(`‚úÖ Arquivo de log de teste criado: ${testLogFile}`);
    } catch (error) {
      console.error(`‚ùå Erro ao criar arquivo de log de teste: ${error.message}`);
    }
  }
}

// Corrigir o c√≥digo fonte do provedor Perplexity
function fixPerplexityProviderCode() {
  const perplexityPath = path.join(__dirname, 'src', 'api', 'providers', 'perplexity.ts');
  console.log(`üìÑ Modificando arquivo: ${perplexityPath}`);
  
  if (!fs.existsSync(perplexityPath)) {
    console.error(`‚ùå Arquivo n√£o encontrado: ${perplexityPath}`);
    return false;
  }
  
  // Ler o conte√∫do do arquivo
  let content = fs.readFileSync(perplexityPath, 'utf8');
  
  // Criar backup do arquivo original
  fs.writeFileSync(`${perplexityPath}.backup`, content);
  console.log(`‚úÖ Backup criado em: ${perplexityPath}.backup`);
  
  // Modificar o c√≥digo para isolar completamente o modo browser
  console.log('üîÑ Modificando c√≥digo para separar completamente modo browser e API...');
  
  // 1. Modificar a fun√ß√£o principal para criar uma separa√ß√£o clara entre modos browser e API
  const newBrowserModeCode = `
    // MODO BROWSER: Verifica√ß√£o separada e isolada para modo browser
    if (perplexityPreferMethod === "browser") {
      // Verificar credenciais exclusivamente para o modo browser
      logger.critical("MODO BROWSER selecionado explicitamente. Ignorando totalmente API.");
      
      if (!perplexityEmail || !perplexityPassword || 
          (typeof perplexityEmail === 'string' && perplexityEmail.trim() === '') || 
          (typeof perplexityPassword === 'string' && perplexityPassword.trim() === '')) {
        const erro = "Email e senha do Perplexity s√£o necess√°rios para o modo navegador. Configure-os nas configura√ß√µes do RooCode.";
        logger.critical(\`ERRO MODO BROWSER: \${erro}\`);
        throw new Error(erro);
      }
      
      logger.info("Credenciais para modo BROWSER validadas. Prosseguindo com automa√ß√£o de navegador.");
      
      // Usar diretamente o browser sem nenhuma convers√£o de formato de mensagem para API
      return await vscode.window.withProgress(
        {
          location: ProgressLocation.Notification,
          title: "Perplexity Browser",
          cancellable: true,
        },
        async (progress, cancellationToken) => {
          if (cancellationToken.isCancellationRequested) {
            logger.info("Opera√ß√£o cancelada pelo usu√°rio");
            throw new Error("Opera√ß√£o cancelada pelo usu√°rio");
          }

          return await usePerplexityBrowser(
            perplexityEmail || '',
            perplexityPassword || '',
            messages,
            imageUrls,
            apiModelId,
            progress,
            cancellationToken,
            logger
          );
        }
      );
    }
  `;
  
  // Substituir o c√≥digo do modo browser
  const browserModeRegex = /if\s*\(\s*perplexityPreferMethod\s*===\s*"browser"\s*\)\s*\{[\s\S]+?\}\s*else\s*if/;
  if (browserModeRegex.test(content)) {
    content = content.replace(browserModeRegex, match => `${newBrowserModeCode}\n    // MODO API: Verifica√ß√£o separada e isolada para modo API\n    if`);
  } else {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel encontrar o padr√£o exato para substitui√ß√£o do modo browser.');
    
    // Abordagem alternativa: Adicionar nosso c√≥digo ap√≥s a detec√ß√£o do m√©todo preferido
    const preferMethodRegex = /const\s*{[^}]*perplexityPreferMethod\s*=\s*"auto"[^}]*}\s*=\s*options;/;
    if (preferMethodRegex.test(content)) {
      content = content.replace(preferMethodRegex, match => `${match}\n\n  // VERIFICA√á√ÉO FUNDAMENTAL: Qual m√©todo est√° selecionado\n  logger.critical(\`[VERIFICA√á√ÉO] M√©todo selecionado: \${perplexityPreferMethod}\`);\n  \n  try {\n    ${newBrowserModeCode}`);
      
      // Precisamos fechar o try no final da fun√ß√£o
      const functionEndRegex = /return await vscode\.window\.withProgress[\s\S]+?}\s*\)\s*;\s*}\s*$/;
      if (functionEndRegex.test(content)) {
        content = content.replace(functionEndRegex, match => `${match.slice(0, -1)}\n  } catch (error) {\n    // Log detalhado de qualquer erro que ocorra na fun√ß√£o principal\n    logger.critical(\`Erro fatal em perplexityCompletion: \${error instanceof Error ? error.message : String(error)}\`);\n    if (error instanceof Error && error.stack) {\n      logger.debug(\`Stack trace do erro principal: \${error.stack}\`);\n    }\n    // Relan√ßar o erro para ser tratado pelo chamador\n    throw error;\n  }\n}`);
      }
    }
  }
  
  // 2. Modificar a fun√ß√£o callPerplexityApi para validar a chave API antes de construir headers
  const apiCallRegex = /async function callPerplexityApi[\s\S]+?{/;
  const validationCode = `
  // Valida√ß√£o rigorosa da chave de API
  if (!apiKey || apiKey.trim() === '') {
    const erro = "Chave de API do Perplexity √© necess√°ria. Configure-a nas configura√ß√µes do RooCode.";
    logger.error('Valida√ß√£o falhou: Chave de API n√£o fornecida ou vazia');
    throw new Error(erro);
  }
  `;
  
  if (apiCallRegex.test(content)) {
    content = content.replace(apiCallRegex, match => `${match}\n${validationCode}`);
  }
  
  // 3. Melhorar a cria√ß√£o da fun√ß√£o createLogger para debug
  const createLoggerRegex = /function createLogger\(loggingEnabled = false\) {/;
  const criticalLogCode = `
    critical: (message: string, error?: any) => {
      // Logs cr√≠ticos sempre s√£o gravados, mesmo se logging desabilitado
      const errorMessage = error ? \`\${message}: \${error.message || error}\` : message;
      safeAppendToLog('CRITICAL', \`ATEN√á√ÉO - ERRO GRAVE: \${errorMessage}\`);
      
      // Sempre tenta gravar no arquivo, mesmo com logging desabilitado
      try {
        const timestamp = new Date().toISOString();
        fs.appendFileSync(logFile, \`[\${timestamp}][CRITICAL] \${errorMessage}\\n\`);
        if (error && error.stack) {
          fs.appendFileSync(logFile, \`[\${timestamp}][STACK] \${error.stack}\\n\`);
        }
      } catch (criticalError) {
        console.error(\`N√£o foi poss√≠vel registrar erro cr√≠tico: \${criticalError}\`);
      }
    }
  `;
  
  const returnLoggerRegex = /return \{\s*debug:[^}]+},\s*warn:[^}]+},\s*info:[^}]+},\s*error:[^}]+}\s*};/;
  if (returnLoggerRegex.test(content)) {
    content = content.replace(returnLoggerRegex, match => match.replace(/}(\s*)};/, `},\n    ${criticalLogCode}\n  $1};`));
  }
  
  // 4. Melhorar o manuseio de erros no wrapper principal
  const errorHandlingRegex = /} catch \(error(?: |:)(?:any)?\) {[\s\S]+?throw new Error\([^)]+\);[\s\S]+?}/;
  if (errorHandlingRegex.test(content)) {
    content = content.replace(errorHandlingRegex, match => `} catch (error: any) {
    // Log detalhado e enriquecido do erro
    let errorDetails = "Erro desconhecido";
    let userFriendlyMessage = "Ocorreu um erro ao se comunicar com o Perplexity. Tente novamente mais tarde.";
    
    if (axios.isAxiosError(error)) {
      // Log dos headers da requisi√ß√£o (exceto auth) para debugging
      if (error.config && error.config.headers) {
        const safeHeaders = { ...error.config.headers };
        if ('Authorization' in safeHeaders) {
          safeHeaders['Authorization'] = 'Bearer [REDACTED]';
        }
        logger.debug(\`Headers enviados na requisi√ß√£o: \${JSON.stringify(safeHeaders)}\`);
      }
      
      if (error.response) {
        const status = error.response.status;
        const responseData = error.response.data || {};
        
        errorDetails = \`Status HTTP: \${status}, Resposta: \${JSON.stringify(responseData)}\`;
        logger.debug(\`Resposta de erro completa: \${JSON.stringify(error.response.headers || {})}\`);
        
        // Detec√ß√£o e tratamento detalhado de erros espec√≠ficos
        if (status === 400) {
          const errorType = responseData.error?.type || 'bad_request';
          logger.error(\`Erro de requisi√ß√£o inv√°lida (\${errorType}): par√¢metros incorretos ou mal formatados\`, error);
          
          // Mensagens espec√≠ficas baseadas no tipo de erro
          if (errorType.includes('authentication') || responseData.error?.message?.includes('authentication')) {
            userFriendlyMessage = "Erro de autentica√ß√£o: m√©todo de autentica√ß√£o n√£o pode ser resolvido. Verifique suas configura√ß√µes no Perplexity.";
          } else {
            userFriendlyMessage = "A requisi√ß√£o enviada ao Perplexity cont√©m erros. Verifique as configura√ß√µes e tente novamente.";
          }
        } 
        else if (status === 401) {
          logger.error(\`Erro de autentica√ß√£o (401): API key inv√°lida ou expirada\`, error);
          userFriendlyMessage = "Falha na autentica√ß√£o da API Perplexity. Verifique se sua chave de API est√° correta e v√°lida.";
        } 
        else if (status === 403) {
          logger.error(\`Erro de permiss√£o (403): Acesso negado\`, error);
          userFriendlyMessage = "Acesso negado √† API Perplexity. Sua chave de API pode n√£o ter permiss√µes para este modelo ou recurso.";
        } 
        else if (status === 404) {
          logger.error(\`Erro 404: Recurso n√£o encontrado\`, error);
          userFriendlyMessage = "O recurso solicitado n√£o foi encontrado na API do Perplexity. Verifique o modelo selecionado.";
        }
        else if (status === 429) {
          logger.error(\`Limite de taxa excedido (429): Muitas requisi√ß√µes\`, error);
          userFriendlyMessage = "Limite de requisi√ß√µes da API Perplexity excedido. Tente novamente mais tarde.";
        }
        else if (status >= 500) {
          logger.error(\`Erro do servidor Perplexity (\${status})\`, error);
          userFriendlyMessage = "O servidor do Perplexity encontrou um erro. Tente novamente mais tarde.";
        }
      } 
      else if (error.request) {
        errorDetails = "Nenhuma resposta recebida do servidor";
        logger.error(\`Erro de conex√£o: Solicita√ß√£o enviada mas sem resposta\`, error);
        logger.debug(\`Detalhes da requisi√ß√£o: \${JSON.stringify(error.request)}\`);
        userFriendlyMessage = "N√£o foi poss√≠vel conectar √† API Perplexity. Verifique sua conex√£o de internet.";
      } 
      else {
        errorDetails = error.message;
        logger.error(\`Erro ao criar requisi√ß√£o: \${error.message}\`, error);
        userFriendlyMessage = "Erro ao preparar a requisi√ß√£o para o Perplexity. Verifique a configura√ß√£o.";
      }
    } 
    else if (error instanceof Error) {
      errorDetails = \`Erro n√£o-Axios: \${error.message}\`;
      logger.error(\`Erro n√£o relacionado ao Axios: \${error.message}\`, error);
    }
    
    // Log detalhado do erro para diagnosticar o problema
    logger.error(\`Falha na requisi√ß√£o √† API: \${errorDetails}\`);
    
    // Log da pilha de chamadas para ajudar no diagn√≥stico
    if (error.stack) {
      logger.debug(\`Stack trace: \${error.stack}\`);
    }
    
    // Lan√ßar erro com mensagem amig√°vel para o usu√°rio
    throw new Error(userFriendlyMessage);
  }`);
  }
  
  // Salvar o arquivo modificado
  fs.writeFileSync(perplexityPath, content);
  console.log('‚úÖ Corre√ß√µes aplicadas ao c√≥digo do provider Perplexity');
  
  return true;
}

// Executar a corre√ß√£o
try {
  console.log('üîç Verificando e corrigindo arquivos de configura√ß√£o...');
  fixConfigFiles();
  
  console.log('üîç Modificando c√≥digo fonte do provider Perplexity...');
  if (fixPerplexityProviderCode()) {
    console.log('üîß Compilando a extens√£o com as corre√ß√µes...');
    execSync('node esbuild.js', { stdio: 'inherit' });
    
    console.log(`
‚úÖ Corre√ß√µes aplicadas com sucesso!

üìã Resumo das corre√ß√µes:
1. Separado completamente o modo browser do modo API
2. Valida√ß√£o rigorosa das credenciais antes de qualquer chamada
3. Melhorado sistema de logs e diagn√≥stico
4. Tratamento detalhado de erros para mensagens mais claras

üöÄ Para testar a corre√ß√£o, voc√™ pode:
1. Desinstalar sua vers√£o atual do RooCode
2. Criar um novo pacote VSIX com: node build-vsix.js
3. Instalar o pacote corrigido
4. Configurar apenas o email e senha (sem API key) e m√©todo "Somente Browser"

üí° Alternativa: Inicie a extens√£o em modo de debug com: node debug-extension.js
`);
  } else {
    console.error('‚ùå N√£o foi poss√≠vel aplicar algumas das corre√ß√µes. Verifique os logs acima.');
  }
} catch (error) {
  console.error('‚ùå Erro ao executar script de corre√ß√£o:', error);
  
  // Restaurar arquivo original em caso de erro
  const perplexityPath = path.join(__dirname, 'src', 'api', 'providers', 'perplexity.ts');
  const backupPath = `${perplexityPath}.backup`;
  if (fs.existsSync(backupPath)) {
    fs.copyFileSync(backupPath, perplexityPath);
    console.log('üîÑ Arquivo original restaurado ap√≥s erro');
  }
}
